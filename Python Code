import cv2
import controller as cnt
from cvzone.HandTrackingModule import HandDetector

detector = HandDetector(detectionCon=0.1, maxHands=2)

video = cv2.VideoCapture(0)

switch = "OFF"

#/////////////////////////////////////////////////////////////////
# List of appliances with their statuses
appliances = [
    {"name": "Light", "status": "OFF"},
    {"name": "Fan", "status": "OFF"},
    {"name": "AC", "status": "OFF"},
    {"name": "TV", "status": "OFF"},
    {"name": "Geyser", "status": "OFF"}
]

def change_status(appliance_name, new_status):
    for appliance in appliances:
        if appliance['name'] == appliance_name:
            appliance['status'] = new_status
            break  

def is_on(appliance_name):
    for appliance in appliances:
        if appliance['name'] == appliance_name:
            return appliance['status'] == 'ON'  
    return False
    
#///////////////////////////////////////////////////////////////


while True:
    powerDown = 50
    
    while True:
        cnt.led(appliances)
        
        ret, frame = video.read()
        frame = cv2.flip(frame, 1)  # Flip the frame horizontally
        hands, img = detector.findHands(frame)  # Detect hands
        
        if len(hands) == 2:
            # Assign the left and right hands based on handType
            if hands[0]['type'] == 'Left':
                leftHand = hands[0]
                rightHand = hands[1]
            else:
                leftHand = hands[1]
                rightHand = hands[0]

            # Swap left and right labels for display purposes after flip
            displayLeftHand = rightHand
            displayRightHand = leftHand

            fingerUpLeft = detector.fingersUp(displayLeftHand)
            fingerUpRight = detector.fingersUp(displayRightHand)

            if fingerUpLeft == [0, 0, 0, 0, 1] and fingerUpRight == [0, 0, 0, 0, 1]:
                switch = "ON"
                print("Power ON")
                break
        
        cv2.imshow("frame", frame)
        k = cv2.waitKey(1)
        if k == ord("k"):
            break

    while switch == "ON":
        cnt.led(appliances)
        
        ret, frame = video.read()
        frame = cv2.flip(frame, 1)  # Flip the frame horizontally
        hands, img = detector.findHands(frame)
        
        if len(hands) == 2:
            powerDown = 50
            
            # Assign the left and right hands based on handType
            if hands[0]['type'] == 'Left':
                leftHand = hands[0]
                rightHand = hands[1]
            else:
                leftHand = hands[1]
                rightHand = hands[0]

            # Swap left and right labels for display purposes after flip
            displayLeftHand = rightHand
            displayRightHand = leftHand

            fingerUpLeft = detector.fingersUp(displayLeftHand)
            fingerUpRight = detector.fingersUp(displayRightHand)
            print(f"{fingerUpLeft}, {fingerUpRight}")

            #//   ON   //#
            if not is_on('Light') and fingerUpLeft == [0, 0, 0, 0, 0] and fingerUpRight == [1, 0, 0, 0, 0]:
                change_status('Light', 'ON')
            elif not is_on('Fan') and fingerUpLeft == [0, 0, 0, 0, 0] and fingerUpRight == [0, 1, 0, 0, 0]:
                change_status('Fan', 'ON')
            elif not is_on('AC') and fingerUpLeft == [0, 0, 0, 0, 0] and fingerUpRight == [0, 0, 1, 0, 0]:
                change_status('AC', 'ON')
            elif not is_on('TV') and fingerUpLeft == [0, 0, 0, 0, 0] and fingerUpRight == [0, 0, 0, 1, 0]:
                change_status('TV', 'ON')
            elif not is_on('Geyser') and fingerUpLeft == [0, 0, 0, 0, 0] and fingerUpRight == [0, 0, 0, 0, 1]:
                change_status('Geyser', 'ON')
                
            #//   OFF   //#
            if is_on('Light') and fingerUpLeft == [1, 0, 0, 0, 0] and fingerUpRight == [0, 0, 0, 0, 0]:
                change_status('Light', 'OFF')
            elif is_on('Fan') and fingerUpLeft == [0, 1, 0, 0, 0] and fingerUpRight == [0, 0, 0, 0, 0]:
                change_status('Fan', 'OFF')
            elif is_on('AC') and fingerUpLeft == [0, 0, 1, 0, 0] and fingerUpRight == [0, 0, 0, 0, 0]:
                change_status('AC', 'OFF')
            elif is_on('TV') and fingerUpLeft == [0, 0, 0, 1, 0] and fingerUpRight == [0, 0, 0, 0, 0]:
                change_status('TV', 'OFF')
            elif is_on('Geyser') and fingerUpLeft == [0, 0, 0, 0, 1] and fingerUpRight == [0, 0, 0, 0, 0]:
                change_status('Geyser', 'OFF')
            
            # Display the status of each appliance
            for i, appliance in enumerate(appliances):
                text = f"{appliance['name']}"
                cv2.putText(frame, text, (20, 400 + i * 15), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 255, 255), 1, cv2.LINE_AA)
                color = (0, 255, 0) if appliance['status'] == 'ON' else (0, 0, 255)
                cv2.circle(frame, (150, 400 + i * 15 - 10), 7, color, -1) 
                
                
            cnt.led(appliances)

        else:
            powerDown -= 1
            print(f'\rPowering Off: {powerDown}', end='')
            if powerDown == 0:
                switch = "OFF"
                print("\nSwitch OFF")
                break
            cv2.waitKey(2)
            
        cv2.imshow("frame", frame)
        k = cv2.waitKey(5)
        if k == ord("k"):
            break
        
    cv2.imshow("frame", frame)
    k = cv2.waitKey(1)
    if k == ord("k"):
        break

video.release()
cv2.destroyAllWindows()
